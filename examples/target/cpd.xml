<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="47" tokens="263">
<file line="105" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TestASFEmail.java"/>
<file line="93" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TestNewsGroups.java"/>
<codefragment>
<![CDATA[
      ra.addInstance(newsGroups.values().get(actual), cr);

    }
    output.printf("%s\n\n", ra.toString());
  }

  boolean parseArgs(String[] args) {
    DefaultOptionBuilder builder = new DefaultOptionBuilder();

    Option help = builder.withLongName("help").withDescription("print this list").create();

    ArgumentBuilder argumentBuilder = new ArgumentBuilder();
    Option inputFileOption = builder.withLongName("input")
            .withRequired(true)
            .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
            .withDescription("where to get training data")
            .create();

    Option modelFileOption = builder.withLongName("model")
            .withRequired(true)
            .withArgument(argumentBuilder.withName("model").withMaximum(1).create())
            .withDescription("where to get a model")
            .create();

    Group normalArgs = new GroupBuilder()
            .withOption(help)
            .withOption(inputFileOption)
            .withOption(modelFileOption)
            .create();

    Parser parser = new Parser();
    parser.setHelpOption(help);
    parser.setHelpTrigger("--help");
    parser.setGroup(normalArgs);
    parser.setHelpFormatter(new HelpFormatter(" ", "", " ", 130));
    CommandLine cmdLine = parser.parseAndHelp(args);

    if (cmdLine == null) {
      return false;
    }

    inputFile = (String) cmdLine.getValue(inputFileOption);
    modelFile = (String) cmdLine.getValue(modelFileOption);
    return true;
  }

}
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="237">
<file line="146" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainAdaptiveLogistic.java"/>
<file line="133" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java"/>
<codefragment>
<![CDATA[
      for (int row = 0; row < lr.getBeta().numRows(); row++) {
        for (String key : csv.getTraceDictionary().keySet()) {
          double weight = predictorWeight(lr, row, csv, key);
          if (weight != 0) {
            output.printf(Locale.ENGLISH, "%20s %.5f\n", key, weight);
          }
        }
        for (int column = 0; column < lr.getBeta().numCols(); column++) {
          output.printf(Locale.ENGLISH, "%15.9f ", lr.getBeta().get(row, column));
        }
        output.println();
      }
    }
  }

  private static double predictorWeight(OnlineLogisticRegression lr, int row, RecordFactory csv, String predictor) {
    double weight = 0;
    for (Integer column : csv.getTraceDictionary().get(predictor)) {
      weight += lr.getBeta().get(row, column);
    }
    return weight;
  }

  private static boolean parseArgs(String[] args) {
    DefaultOptionBuilder builder = new DefaultOptionBuilder();

    Option help = builder.withLongName("help").withDescription("print this list").create();

    Option quiet = builder.withLongName("quiet").withDescription("be extra quiet").create();
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="202">
<file line="51" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/grouplens/GroupLensRecommender.java"/>
<file line="40" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/jester/JesterRecommender.java"/>
<codefragment>
<![CDATA[
  public JesterRecommender(DataModel dataModel) throws TasteException {
    recommender = new CachingRecommender(new SlopeOneRecommender(dataModel));
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
    return recommender.recommend(userID, howMany);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
    return recommender.recommend(userID, howMany, rescorer);
  }
  
  @Override
  public float estimatePreference(long userID, long itemID) throws TasteException {
    return recommender.estimatePreference(userID, itemID);
  }
  
  @Override
  public void setPreference(long userID, long itemID, float value) throws TasteException {
    recommender.setPreference(userID, itemID, value);
  }
  
  @Override
  public void removePreference(long userID, long itemID) throws TasteException {
    recommender.removePreference(userID, itemID);
  }
  
  @Override
  public DataModel getDataModel() {
    return recommender.getDataModel();
  }
  
  @Override
  public void refresh(Collection<Refreshable> alreadyRefreshed) {
    recommender.refresh(alreadyRefreshed);
  }
  
  @Override
  public String toString() {
    return "JesterRecommender[recommender:" + recommender + ']';
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="196">
<file line="40" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track1/Track1Recommender.java"/>
<file line="46" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track2/Track2Recommender.java"/>
<codefragment>
<![CDATA[
    recommender = new GenericBooleanPrefItemBasedRecommender(dataModel, similarity);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
    return recommender.recommend(userID, howMany);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
    return recommender.recommend(userID, howMany, rescorer);
  }
  
  @Override
  public float estimatePreference(long userID, long itemID) throws TasteException {
    return recommender.estimatePreference(userID, itemID);
  }
  
  @Override
  public void setPreference(long userID, long itemID, float value) throws TasteException {
    recommender.setPreference(userID, itemID, value);
  }
  
  @Override
  public void removePreference(long userID, long itemID) throws TasteException {
    recommender.removePreference(userID, itemID);
  }
  
  @Override
  public DataModel getDataModel() {
    return recommender.getDataModel();
  }
  
  @Override
  public void refresh(Collection<Refreshable> alreadyRefreshed) {
    recommender.refresh(alreadyRefreshed);
  }
  
  @Override
  public String toString() {
    return "Track1Recommender[recommender:" + recommender + ']';
  }
  
}
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="191">
<file line="48" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java"/>
<file line="47" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java"/>
<codefragment>
<![CDATA[
    recommender = new GenericUserBasedRecommender(bcModel, neighborhood, similarity);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
    return recommender.recommend(userID, howMany);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
    return recommender.recommend(userID, howMany, rescorer);
  }
  
  @Override
  public float estimatePreference(long userID, long itemID) throws TasteException {
    return recommender.estimatePreference(userID, itemID);
  }
  
  @Override
  public void setPreference(long userID, long itemID, float value) throws TasteException {
    recommender.setPreference(userID, itemID, value);
  }
  
  @Override
  public void removePreference(long userID, long itemID) throws TasteException {
    recommender.removePreference(userID, itemID);
  }
  
  @Override
  public DataModel getDataModel() {
    return recommender.getDataModel();
  }
  
  @Override
  public void refresh(Collection<Refreshable> alreadyRefreshed) {
    recommender.refresh(alreadyRefreshed);
  }
  
  @Override
  public String toString() {
    return "BookCrossingRecommender[recommender:" + recommender + ']';
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="187">
<file line="48" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java"/>
<file line="40" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/kddcup/track1/Track1Recommender.java"/>
<codefragment>
<![CDATA[
    recommender = new GenericItemBasedRecommender(dataModel, similarity);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
    return recommender.recommend(userID, howMany);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
    return recommender.recommend(userID, howMany, rescorer);
  }
  
  @Override
  public float estimatePreference(long userID, long itemID) throws TasteException {
    return recommender.estimatePreference(userID, itemID);
  }
  
  @Override
  public void setPreference(long userID, long itemID, float value) throws TasteException {
    recommender.setPreference(userID, itemID, value);
  }
  
  @Override
  public void removePreference(long userID, long itemID) throws TasteException {
    recommender.removePreference(userID, itemID);
  }
  
  @Override
  public DataModel getDataModel() {
    return recommender.getDataModel();
  }
  
  @Override
  public void refresh(Collection<Refreshable> alreadyRefreshed) {
    recommender.refresh(alreadyRefreshed);
  }
  
  @Override
  public String toString() {
    return "Track1Recommender[recommender:" + recommender + ']';
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="185">
<file line="48" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingBooleanRecommender.java"/>
<file line="52" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/cf/taste/example/grouplens/GroupLensRecommender.java"/>
<codefragment>
<![CDATA[
    recommender = new CachingRecommender(new SlopeOneRecommender(dataModel));
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany) throws TasteException {
    return recommender.recommend(userID, howMany);
  }
  
  @Override
  public List<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer) throws TasteException {
    return recommender.recommend(userID, howMany, rescorer);
  }
  
  @Override
  public float estimatePreference(long userID, long itemID) throws TasteException {
    return recommender.estimatePreference(userID, itemID);
  }
  
  @Override
  public void setPreference(long userID, long itemID, float value) throws TasteException {
    recommender.setPreference(userID, itemID, value);
  }
  
  @Override
  public void removePreference(long userID, long itemID) throws TasteException {
    recommender.removePreference(userID, itemID);
  }
  
  @Override
  public DataModel getDataModel() {
    return recommender.getDataModel();
  }
  
  @Override
  public void refresh(Collection<Refreshable> alreadyRefreshed) {
    recommender.refresh(alreadyRefreshed);
  }
  
  @Override
  public String toString() {
    return "GroupLensRecommender[recommender:" + recommender + ']';
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="154">
<file line="94" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/RunLogistic.java"/>
<file line="137" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/ValidateAdaptiveLogistic.java"/>
<codefragment>
<![CDATA[
      }
      
    }
  }

  private static boolean parseArgs(String[] args) {
    DefaultOptionBuilder builder = new DefaultOptionBuilder();

    Option help = builder.withLongName("help")
        .withDescription("print this list").create();

    Option quiet = builder.withLongName("quiet")
        .withDescription("be extra quiet").create();

    Option auc = builder.withLongName("auc").withDescription("print AUC")
        .create();
    Option confusion = builder.withLongName("confusion")
        .withDescription("print confusion matrix").create();

    Option scores = builder.withLongName("scores")
        .withDescription("print scores").create();
  
    ArgumentBuilder argumentBuilder = new ArgumentBuilder();
    Option inputFileOption = builder
        .withLongName("input")
        .withRequired(true)
        .withArgument(
            argumentBuilder.withName("input").withMaximum(1)
                .create())
        .withDescription("where to get validate data").create();
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="127">
<file line="42" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/kmeans/Job.java"/>
<file line="40" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/Job.java"/>
<codefragment>
<![CDATA[
public final class Job extends AbstractJob {
  
  private static final Logger log = LoggerFactory.getLogger(Job.class);
  
  private static final String DIRECTORY_CONTAINING_CONVERTED_INPUT = "data";
  
  private Job() {}
  
  public static void main(String[] args) throws Exception {
    if (args.length > 0) {
      log.info("Running with only user-supplied arguments");
      ToolRunner.run(new Configuration(), new Job(), args);
    } else {
      log.info("Running with default arguments");
      Path output = new Path("output");
      Configuration conf = new Configuration();
      HadoopUtil.delete(conf, output);
      run(conf, new Path("testdata"), output,
          new EuclideanDistanceMeasure(), new TriangularKernelProfile(), 47.6,
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="127">
<file line="129" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/df/BreimanExample.java"/>
<file line="78" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/df/mapreduce/BuildForest.java"/>
<codefragment>
<![CDATA[
    InstantiationException, IllegalAccessException {
    
    DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
    ArgumentBuilder abuilder = new ArgumentBuilder();
    GroupBuilder gbuilder = new GroupBuilder();
    
    Option dataOpt = obuilder.withLongName("data").withShortName("d").withRequired(true)
        .withArgument(abuilder.withName("path").withMinimum(1).withMaximum(1).create())
        .withDescription("Data path").create();
    
    Option datasetOpt = obuilder.withLongName("dataset").withShortName("ds").withRequired(true)
        .withArgument(abuilder.withName("dataset").withMinimum(1).withMaximum(1).create())
        .withDescription("Dataset path").create();
    
    Option selectionOpt = obuilder.withLongName("selection").withShortName("sl").withRequired(false)
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="118">
<file line="117" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainASFEmail.java"/>
<file line="134" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainNewsGroups.java"/>
<codefragment>
<![CDATA[
    ModelSerializer.writeBinary("/tmp/news-group.model",
            learningAlgorithm.getBest().getPayload().getLearner().getModels().get(0));

    List<Integer> counts = Lists.newArrayList();
    System.out.printf("Word counts\n");
    for (String count : overallCounts.elementSet()) {
      counts.add(overallCounts.count(count));
    }
    Collections.sort(counts, Ordering.natural().reverse());
    k = 0;
    for (Integer count : counts) {
      System.out.printf("%d\t%d\n", k, count);
      k++;
      if (k > 1000) {
        break;
      }
    }
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="111">
<file line="108" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/RunLogistic.java"/>
<file line="114" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TestASFEmail.java"/>
<codefragment>
<![CDATA[
    Option help = builder.withLongName("help").withDescription("print this list").create();

    ArgumentBuilder argumentBuilder = new ArgumentBuilder();
    Option inputFileOption = builder.withLongName("input")
            .withRequired(true)
            .withArgument(argumentBuilder.withName("input").withMaximum(1).create())
            .withDescription("where to get training data")
            .create();

    Option modelFileOption = builder.withLongName("model")
            .withRequired(true)
            .withArgument(argumentBuilder.withName("model").withMaximum(1).create())
            .withDescription("where to get a model")
            .create();

    Group normalArgs = new GroupBuilder()
            .withOption(help)
            .withOption(inputFileOption)
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="105">
<file line="346" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainAdaptiveLogistic.java"/>
<file line="282" path="/Users/liuivan/Workspace/Libraries/mahout-distribution-0.7/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java"/>
<codefragment>
<![CDATA[
    TrainLogistic.passes = getIntegerArgument(cmdLine, passes);

    return true;
  }

  private static String getStringArgument(CommandLine cmdLine, Option inputFile) {
    return (String) cmdLine.getValue(inputFile);
  }

  private static boolean getBooleanArgument(CommandLine cmdLine, Option option) {
    return cmdLine.hasOption(option);
  }

  private static int getIntegerArgument(CommandLine cmdLine, Option features) {
    return Integer.parseInt((String) cmdLine.getValue(features));
  }

  private static double getDoubleArgument(CommandLine cmdLine, Option op) {
    return Double.parseDouble((String) cmdLine.getValue(op));
  }

  public static OnlineLogisticRegression getModel() {
]]>
</codefragment>
</duplication>
</pmd-cpd>